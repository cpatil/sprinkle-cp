#!/usr/bin/env ruby
#
#  Created on 2008-3-11.
#  Copyright (c) 2008. All rights reserved.

begin
  require 'rubygems'
rescue LoadError
  # no rubygems to load, so we fail silently
end

require 'optparse'
require 'pathname'

# NOTE: the option -p/--path= is given as an example, and should probably be replaced in your application.

OPTIONS = {}
MANDATORY_OPTIONS = %w( path )

ARGV.each do |arg|
  ENV[$1] = $2 if arg =~ /^(\w+)=(.*)$/
end

parser = OptionParser.new do |opts|
  opts.banner = <<BANNER
Sprinkle
========

http://github.com/crafterm/sprinkle

Sprinkle is a software provisioning tool you can use to build remote servers with. eg. to
install a Rails or Merb stack on a brand new slice directly after its been created. It uses
a Ruby based domain specific language to describe packages and policies to determine what
should be installed on particular systems.

Please see http://github.com/crafterm/sprinkle/tree/master/README.txt for more information.

Usage
=====

$> #{File.basename($0)} [options]

Options are:
BANNER
  opts.separator ""
  opts.on("-s", "--script=PATH", String,
          "Path to a sprinkle script to run") { |v| OPTIONS[:path] = v }
  opts.on("-t", "--test",
          "Process but don't perform any actions") { |v| OPTIONS[:testing] = v }
  opts.on("-v", "--verbose",
          "Verbose output") { |v| OPTIONS[:verbose] = v }
  opts.on("-c", "--cloud",
          "Show powder cloud, ie. package hierarchy and installation order") { |v| OPTIONS[:cloud] = v }
  opts.on("-f", "--force",
          "Force installation of all packages even if it is detected that it has been previously installed") { |v| OPTIONS[:force] = v }
  opts.on("-d", "--deploy_dir=PATH", String,
          "Specifies the deploy directory to build") { |dir| OPTIONS[:deploy_dir] = dir }
  opts.on("-h", "--help",
          "Show this help message.") { puts opts; exit }
  opts.parse!(ARGV)

  if MANDATORY_OPTIONS && MANDATORY_OPTIONS.find { |option| OPTIONS[option.to_sym].nil? }
    puts opts; exit
  end
end

def force_mode(options)
  Sprinkle::OPTIONS[:force] = OPTIONS[:force] || false
end

def operation_mode(options)
  Sprinkle::OPTIONS[:testing] = OPTIONS[:testing] || false
end

def powder_cloud(options)
  Sprinkle::OPTIONS[:cloud] = OPTIONS[:cloud] || false
end

def set_deploy_dir(options)
  Sprinkle::OPTIONS[:deploy_dir] = OPTIONS[:deploy_dir] ? 
  Pathname.new(OPTIONS[:deploy_dir]).absolute? ? OPTIONS[:deploy_dir] : File.join(Dir.pwd,OPTIONS[:deploy_dir])  : nil  
end

def verbosity(options)
  Sprinkle::OPTIONS[:verbose] = OPTIONS[:verbose] || false
end

def log_level(options)
  Object.logger.level = ActiveSupport::BufferedLogger::Severity::DEBUG if options[:verbose]
end

require File.dirname(__FILE__) + '/../lib/sprinkle'

powder = OPTIONS[:path]
raise "Sprinkle script is not readable: #{powder}" unless File.readable?(powder)

force_mode(OPTIONS)
operation_mode(OPTIONS)
powder_cloud(OPTIONS)
log_level(OPTIONS)
set_deploy_dir(OPTIONS)
verbosity(OPTIONS)


Sprinkle::Script.sprinkle File.read(powder), powder

puts "Generating execution environment files"

unless Sprinkle::OPTIONS[:deploy_dir].nil?
  File.open(File.join(Sprinkle::OPTIONS[:deploy_dir], 'source_env.tcsh'), 'w') do |file|
    file.write %q%

# Remove existing deploy paths
if ($?DEPLOY_HOME) then
    if ($?DEPLOY_PATH) then
      setenv PATH "`echo $PATH | sed -e 's#${DEPLOY_PATH}[:]*##'`"
    endif

    if ($?DEPLOY_LD_LIBRARY_PATH) then
      setenv LD_LIBRARY_PATH "`echo $LD_LIBRARY_PATH | sed -e 's#${DEPLOY_LD_LIBRARY_PATH}[:]*##'`"
    endif

  unsetenv DEPLOY_HOME
  unsetenv DEPLOY_PATH
  unsetenv DEPLOY_LD_LIBRARY_PATH

endif
%
file.write %Q%
setenv DEPLOY_HOME #{Sprinkle::OPTIONS[:deploy_dir]}

# Oracle env
setenv NLS_LANG AMERICAN_AMERICA.UTF8

##############################################
# Architecture independent paths e.g. scripts
###############################################
if (! $?DEPLOY_PATH) then
   setenv DEPLOY_PATH ''
endif
if (! $?DEPLOY_LD_LIBRARY_PATH) then
   setenv DEPLOY_LD_LIBRARY_PATH ''
endif

##################################
# Set architecture specific paths
##################################
set machtype = `uname -m`
if ($machtype == "x86_64") then
 set machbits = "64"
else
 set machbits = "32"
endif


###################################
# THE FOLLOWING SHOULDN'T BE MODIFIED
###################################

# set the paths - Note that we intentionally append new paths to DEPLOY_* paths instead of prepending  - this allows us to override these defaults in the source_env.tcsh if needed
setenv DEPLOY_PATH "${DEPLOY_PATH}:$DEPLOY_HOME/tools_${machbits}/bin"
setenv DEPLOY_LD_LIBRARY_PATH "${DEPLOY_LD_LIBRARY_PATH}:$DEPLOY_HOME/tools_${machbits}/lib"

setenv LD_LIBRARY_PATH "${DEPLOY_LD_LIBRARY_PATH}:$LD_LIBRARY_PATH"
setenv PATH "${DEPLOY_PATH}:$PATH"
     
# end source
%    
  end

  File.open(File.join(Sprinkle::OPTIONS[:deploy_dir], 'source_env.sh'), 'w') do |file|
    file.write %q%

if [ ! -z "$DEPLOY_HOME"  ]; then
  if [ ! -z "$DEPLOY_PATH" ]; then
    export PATH=`echo $PATH | sed -e "s#${DEPLOY_PATH}[:]*##"`
  fi
  if [ ! -z "$DEPLOY_LD_LIBRARY_PATH" ]; then
    export LD_LIBRARY_PATH=`echo $LD_LIBRARY_PATH | sed -e "s#${DEPLOY_LD_LIBRARY_PATH}[:]*##"`
  fi
  unset DEPLOY_HOME
  unset DEPLOY_PATH
  unset DEPLOY_LD_LIBRARY_PATH
fi
%

      file.write %Q%
export DEPLOY_HOME=#{Sprinkle::OPTIONS[:deploy_dir]}

# Oracle env
export NLS_LANG="AMERICAN_AMERICA.UTF8"

##############################################
# Architecture independent paths e.g. scripts
##############################################
# ${DEPLOY_PATH:=''}
# ${DEPLOY_LD_LIBRARY_PATH:=''}

##################################
# Set architecture specific paths
##################################
  
machtype=`uname -m`
if [ "$(uname -m)" == 'x86_64' ]; then
    machbits="64"
else
    machbits="32"
fi
     
     
###################################
# THE FOLLOWING SHOULDN'T BE MODIFIED
###################################
     
# set the paths - Note that we intentionally append new paths to DEPLOY_* paths instead of prepending  - this allows us to override these defaults in the source_env.tcsh if needed
export DEPLOY_PATH="${DEPLOY_PATH}:$DEPLOY_HOME/tools_${machbits}/bin"
export DEPLOY_LD_LIBRARY_PATH="${DEPLOY_LD_LIBRARY_PATH}:$DEPLOY_HOME/tools_${machbits}/lib"
     
export LD_LIBRARY_PATH="${DEPLOY_LD_LIBRARY_PATH}:$LD_LIBRARY_PATH"
export PATH="${DEPLOY_PATH}:$PATH"
          
# end source
%    
  end


end
